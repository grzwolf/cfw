<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABAMEAAgGBwAJCAcACwgKAA0LCgAPDQwAEAoOABQRDwAUDhEAFw8UAB8WHQAhGxoAKSIfACgZ
        IgAqHSIAKyAiACwhIwAuJCQAOSIwAD4kMwA/KjgAQzMwAEg6NwBsPyoAbD4tAG08MQBtOjYAbTw1AG43
        PwBuOTkAbjg8AGxFIwBrQSUAbUQmAGxAKABuRioAbUEtAHVQMQB5VTQATStAAFMuQwBMNEAAbzZBAG80
        RQBvNEgAcDdEAHE6QgBxPUEAcTlFAHM+RgBwMkoAcDFNAHI1TQByOEkAYjVQAGM8UQBnP1EAaD5TAGg/
        VgBxMFEAczRRAHIwVQB0MlcAczRUAHUzWgB2NFoAdjVcAHg3XwBwPF0AdT9fAHo5XwB3PGEAfTtjAHo/
        YgB+O2UAeT9kAH8/ZQBpQU4AakVNAGBNSABsSU0Abk1OAHNAQQB0QkIAdUVCAHRBRQB2REUAdkhCAHhL
        QwB4TEIAeEhFAHlMRAB6UEMAfFNDAHpQRQB8UUYAfVVFAH9bRQB+VUkAf1hIAGdAUABjQlkAZUBYAGpD
        WwBxUlAAclVRAHRXUgB1WlQAdV5VAHhgVwB5Y1wAfENpAH5FagB7S2oAgl9HAIBZSQCBXUkAi1BfAIxS
        XgCMVV0AjlldAI9cXQCRX14AgmFEAIRlRQCDYEoAhGFLAIVhTQCGZUwAh2hNAIhpTgCKbE8Aim1QAIxv
        UQCIbl8Ak2JfAI1wUgCOclQAj3RWAJxyXACTeFsAi05hAItNZACMTGYAgUFpAIxLagCMTGgAjUttAJ5O
        aQCcSm0Ank5tAIxUbQCfUmUAn1BpAJFPcwCdSXEAn01xAJ5JdQCfTXYAkk94AIZQdACNVnAAiVF3AI1R
        dwCQWXQAnlR/AJVeeQCbXXkAoFNnAKBWZQChWWQAo11lAKBRawChVWkAollpAKNcaAClXm4AoE16AKFO
        fACjV3MAolZ2AKRZcACjVXgAo1V8AKRUfgCNb2QAlGVgAJZpYQCZbWIAinBiAJtyZACddWUAmH5iAJ54
        ZgCef2cApWFmAKdlZwCoZ2cApWFpAKdlagCnY20AqGZtAKlqagCqbWkAqmptAKxubgCod2gArXJsAK10
        bgChfGkAr3huALB6bwCwZX0AsWp7ALFtegCwaHwArnNwALB4cQCxfnEAsn50ALNxegC1c3oAtnZ7ALd4
        fAC4fX0AnYBnAJ6AbgCjg24ApoVxAKeDdAC0gnUAtYR2ALWCeAC3h3oAu4F/ALiJeQC5jHsAuox9AKRT
        ggCmV4MAqFmFAKtejACvZIAAsGOCALFjhQC0Z4oAvIWAAL+UhADCk4gAxZSLAMiWjwDMmZQAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACKgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAGanAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVo6UAAAAAAAAA
        AAAHEzgJAAAAAAAAAAAAAAAAAAAAC6FxogAAAAAAAQ4oRZFLmw8AAAAAAAAAAAAAAAAAAARycEyYAAAK
        FDeRSURDQUKUDwAAAAAAAAAAAAAAAAAAZ3FISqgpRk1HQ0E/Pj4+P5IPAAAAAAAAAAAAAAAAABWkoKbx
        9kNCPz4+PDw8PDxAkw8AAAAAAAAAAAAAAAAAaPLvs7L1PDw8PDw8PDQ0ND2QDwAAAAAAAAAAAAAAAAA7
        8LKen/Q0NDQ0NDQ0NDQ0NY8PAAAAAAAAAAAAAAAAADu5npyd8zQ0NDQ0MzMzMzM1jg8AAAAAAAAAAAAA
        AAAAOriclp3VMzMzMzMzLS0tLTaODwAAAAAAAAAAAAAAAAA5t5aWl9UtLCwsLCwsLCwsNnYQAAAAAAAA
        AAAAAAAAADm1l5Wt1SwsLCwsLi4uMTExdxAAAAAAAAAAAAAAAAAAZbSVla7YKysrKysvLy8vLzJ4EQAA
        AAAAAAAAAAAAAABOtpqZrtYrKx0dHS8wMDAwVngRAAAAAAAAAAAAAAAAAE62qZmv1x8fHx8fMFNTU1RX
        eREAAAAAAAAAAAAAAAAATrGqqrDXHh4eHh5TVFVVVVt6EQAAAAAAAAAAAAAAAABPsaurx90eHhsbHlVV
        VVhYXHsRAAAAAAAAAAAAAAAAAE/JrKzI3hsbGxwcWFlcXFxgiBEAAAAAAAAAAAAAAAAAUcrExMvfGhoa
        GhpaXF9fX2O7EQAAAAAAAAAAAAAAAABRzcXGzuAaGhoZGl1gYWFhdLwRAAAAAAAAAAAAAAAAAFLOy8zR
        4RkZGRklXmRkZHR1vREAAAAAAAAAAAAAAAAAUtnM0NrhGRgYGCVhdXV1dYC9EgAAAAAAAAAAAAAAAABp
        2tHT3OsjIyMjI2J+f39/gb8SAAAAAAAAAAAAAAAAAGrc1Nvo9yEhISEkc4GBgYGDwBIAAAAAAAAAAAAA
        AAAAa+fb5+z3ISEiJnyBgYKCg4XCEgAAAAAAAAAAAAAAAABs6ujs+ekgJnyDg4OEhYWGitISAAAAAAAA
        AAAAAAAAAG3u7frPJ3yEhomJiovBw+XjugwAAAAAAAAAAAAAAAAAbvj7jH2JjeLk475tUBYNBQAAAAAA
        AAAAAAAAAAAAAABv/OaHbVAXDQYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP//////n////5////8f8P/+HwD//BgA//wAAP/4AAD/+AAA//gAAP/4AAD/+AAA//gA
        AP/4AAD/+AAA//gAAP/4AAD/+AAA//gAAP/4AAD/+AAA//gAAP/4AAD/+AAA//gAAP/4AAD/+AAA//gA
        AP/4AAD/+AAH//gD///5////
</value>
  </data>
</root>